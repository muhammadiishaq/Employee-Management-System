@Library("most_use_labraries") _
pipeline {
    agent { label "ec2_agent" }
    stages {
        stage("code clone") {
            steps {
                echo "cloning the code"
                git url: "https://github.com/muhammadiishaq/Employee-Management-System.git", branch: "main"
                echo "code cloned"
            }
        }
        stage("Installing tools Docker and trviy...") {
            steps {
                echo "Installing Docker tools"
                sh """
                curl -LO https://raw.githubusercontent.com/addico786/tools_download_scripts/master/docker.sh
                sudo chmod +x docker.sh
                ./docker.sh                
                """
                
                echo "Installing Trivy tools"
                sh """
                curl -LO https://raw.githubusercontent.com/addico786/tools_download_scripts/master/trivy.sh
                sudo chmod +x trivy.sh
                ./trivy.sh
                """
                echo "Docker and Trivy are Installed....!"
            }
        }
        stage("Building Images") {
            steps {
                echo "building docker images"
                sh "docker rmi -f app:latest || true"
                docker_build("app", "latest", ".")
                echo "docker built image"
            }
        }
        stage("Image Scan..") {
            steps {
                echo "scanning image"
                sh "trivy image app:latest"
                echo "scan complete"
            }
        }
        stage("push image") {
            steps {
                echo "pushing image to DockerHub"
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag app:latest $DOCKER_USER/app:latest
                        docker push $DOCKER_USER/app:latest
                    """
                    echo "image pushed successfully"
                }
            }
        }
        stage("network_create"){
            steps{
                echo "network create"
                sh "docker network disconnect django app_cont || true "
                sh "docker network disconnect django nginx_cont || true"
                sh "docker network rm django || true "
                docker_network("django")
            }
        }
        stage("container create"){
            steps{
                echo "creating the container"
                sh "docker rm -f app_cont || true "
                docker_run("8000:8000","app_cont","django","app:latest")
            }
        }
        
        stage("nginx config"){
            steps{
                echo "building the code "
                sh "docker rm -f nginx_cont || true"
                docker_build("nginx","latest","./nginx")
                docker_run("80:80","nginx_cont","django","nginx:latest")
                echo "running the container "
            }
        }
    }
}  